//@version=6
strategy("AMT Volumetric Strategy v7 — Auto-Tuned Edition", 
     overlay = true, 
     margin_long = 100, 
     margin_short = 100, 
     default_qty_type = strategy.percent_of_equity, 
     default_qty_value = 10,
     max_bars_back = 500)

// === ADAPTIVE INPUTS ===
// Core Parameters
bins          = input.int(25, "Profile bins per session", minval=15, maxval=50)
va_percent    = input.float(68.0, "Value Area %", minval=60.0, maxval=85.0) / 100.0
vol_sma_len   = input.int(15, "Volume SMA for phase detection", minval=10, maxval=30)
atr_len       = input.int(12, "ATR Length", minval=8, maxval=20)

// Adaptive Risk Management
base_risk     = input.float(0.8, "Base Stop Distance (ATR×)", minval=0.5, maxval=2.0)
base_take     = input.float(2.2, "Base Target Distance (ATR×)", minval=1.2, maxval=4.0)
risk_scaling  = input.float(1.2, "Risk Scaling Factor", minval=0.8, maxval=2.0)

// Performance Tuning
enable_balance = input.bool(true, "Enable Balance Phase Trading")
enable_trend   = input.bool(true, "Enable Trend Phase Trading")
min_volume_mult = input.float(0.8, "Minimum Volume Multiplier", minval=0.5, maxval=1.5)
cvd_sensitivity = input.int(2, "CVD Sensitivity", minval=1, maxval=5)

// Session Management
session_reset = input.session("0000-2359", "Session Reset")
max_trades_per_session = input.int(8, "Max Trades Per Session", minval=3, maxval=15)

// === PERFORMANCE TRACKING ===
var int trades_this_session = 0
var float session_pnl = 0.0
var float best_params_score = 0.0

// === SESSION RESET ===
new_session = ta.change(time("D")) != 0
if new_session
    trades_this_session := 0
    session_pnl := 0.0

// === DYNAMIC PARAMETER ADJUSTMENT ===
// Adjust parameters based on recent performance
recent_trades = strategy.closedtrades >= 10 ? 10 : strategy.closedtrades
win_rate = recent_trades > 0 ? strategy.wintrades / recent_trades : 0.5
avg_trade = recent_trades > 0 ? strategy.netprofit / recent_trades : 0

// Dynamic risk adjustment
dynamic_risk_mult = win_rate < 0.4 ? base_risk * 0.8 : win_rate > 0.7 ? base_risk * 1.3 : base_risk
dynamic_take_mult = win_rate < 0.4 ? base_take * 1.4 : win_rate > 0.7 ? base_take * 0.9 : base_take

// Volume sensitivity adjustment
vol_sensitivity = avg_trade < 0 ? min_volume_mult * 1.2 : min_volume_mult

// === SESSION RANGE TRACKING ===
var float s_high = na
var float s_low  = na
if new_session or na(s_high)
    s_high := high
    s_low  := low
else
    s_high := math.max(s_high, high)
    s_low  := math.min(s_low, low)

session_range = math.max(s_high - s_low, syminfo.mintick * 10)

// === ENHANCED VOLUME BINS ===
var vol_bins = array.new_float()
if new_session or array.size(vol_bins) != bins
    array.clear(vol_bins)
    for _ = 0 to bins - 1
        array.push(vol_bins, 0.0)

// === VOLUME DISTRIBUTION ===
if session_range > 0 and array.size(vol_bins) == bins
    price_position = (close - s_low) / session_range
    bin_idx_raw = price_position * (bins - 1)
    bin_idx = int(math.max(0, math.min(math.floor(bin_idx_raw), bins - 1)))
    
    // Weight volume by price movement
    volume_weight = volume * (1 + math.abs(close - open) / open)
    array.set(vol_bins, bin_idx, array.get(vol_bins, bin_idx) + volume_weight)

// === ENHANCED POC / VALUE AREA CALCULATION ===
var int poc_idx = 0
var float poc_vol = 0.0
var float total_vol = 0.0
var int va_min_idx = 0
var int va_max_idx = 0

if array.size(vol_bins) == bins
    poc_idx := 0
    poc_vol := 0.0
    total_vol := 0.0

    // Find POC
    for i = 0 to bins - 1
        v = array.get(vol_bins, i)
        total_vol += v
        if v > poc_vol
            poc_vol := v
            poc_idx := i

    // Enhanced Value Area calculation
    va_target = total_vol * va_percent
    va_cum = poc_vol
    va_min_idx := poc_idx
    va_max_idx := poc_idx
    left = poc_idx - 1
    right = poc_idx + 1

    // Expand Value Area symmetrically when possible
    while va_cum < va_target and (left >= 0 or right <= bins - 1)
        left_vol = left >= 0 ? array.get(vol_bins, left) : 0.0
        right_vol = right <= bins - 1 ? array.get(vol_bins, right) : 0.0
        
        // Prefer symmetric expansion
        if math.abs(left_vol - right_vol) < poc_vol * 0.1 and left >= 0 and right <= bins - 1
            va_cum += left_vol + right_vol
            va_min_idx := left
            va_max_idx := right
            left -= 1
            right += 1
        else if left_vol > right_vol and left >= 0
            va_cum += left_vol
            va_min_idx := left
            left -= 1
        else if right <= bins - 1
            va_cum += right_vol
            va_max_idx := right
            right += 1
        else
            break

// === PRICE LEVEL MAPPING ===
bin_width = session_range / bins
price_of(idx) => s_low + (idx + 0.5) * bin_width

poc_price = price_of(poc_idx)
val_price = price_of(va_min_idx)
vah_price = price_of(va_max_idx)

// === ENHANCED PHASE DETECTION ===
vol_sma = ta.sma(volume, vol_sma_len)
vol_threshold = vol_sma * vol_sensitivity

// Multi-timeframe volume confirmation
vol_5m = request.security(syminfo.tickerid, "5", volume)
vol_15m = request.security(syminfo.tickerid, "15", volume)
vol_confluence = volume > vol_threshold and vol_5m > ta.sma(vol_5m, 10)

is_in_value = close >= val_price and close <= vah_price
balance_phase = is_in_value and not vol_confluence
inefficiency_phase = (close > vah_price or close < val_price) and vol_confluence

// === ENHANCED ORDER FLOW (CVD) ===
// Multi-timeframe CVD
up_vol = close > open ? volume : close == open ? volume * 0.5 : 0.0
dn_vol = close < open ? volume : close == open ? volume * 0.5 : 0.0
cvd = ta.cum(up_vol - dn_vol)

// CVD momentum
cvd_ma = ta.sma(cvd, cvd_sensitivity)
cvd_momentum = cvd - cvd_ma
cvd_strong_bull = cvd_momentum > ta.stdev(cvd_momentum, 20)
cvd_strong_bear = cvd_momentum < -ta.stdev(cvd_momentum, 20)

// === ADAPTIVE RISK MANAGEMENT ===
atr = ta.atr(atr_len)
volatility_adj = atr / ta.sma(atr, 50) // Volatility adjustment

stop_dist = atr * dynamic_risk_mult * volatility_adj * risk_scaling
take_dist = atr * dynamic_take_mult * volatility_adj

// === ENHANCED ENTRY CONDITIONS ===
// Price action confirmation
bullish_candle = close > open and (close - open) > (high - low) * 0.6
bearish_candle = close < open and (open - close) > (high - low) * 0.6

// Momentum filters
price_momentum = ta.change(close, 3)
strong_momentum = math.abs(price_momentum) > atr * 0.5

// Enhanced signal conditions
cross_over_val = ta.crossover(close, val_price) and bullish_candle
cross_under_vah = ta.crossunder(close, vah_price) and bearish_candle

long_balance  = enable_balance and balance_phase and cross_over_val and cvd_momentum > 0
short_balance = enable_balance and balance_phase and cross_under_vah and cvd_momentum < 0

long_trend    = enable_trend and inefficiency_phase and close > vah_price and cvd_strong_bull and strong_momentum > 0
short_trend   = enable_trend and inefficiency_phase and close < val_price and cvd_strong_bear and strong_momentum < 0

// === TRADE MANAGEMENT ===
// Limit trades per session
can_trade = trades_this_session < max_trades_per_session

// === ENHANCED EXECUTIONS ===
if long_balance and can_trade and strategy.position_size == 0
    strategy.entry("Long_BAL", strategy.long, comment="Balance Long")
    strategy.exit("Exit_LB", "Long_BAL", stop = close - stop_dist, limit = close + take_dist)
    trades_this_session += 1

if short_balance and can_trade and strategy.position_size == 0
    strategy.entry("Short_BAL", strategy.short, comment="Balance Short")
    strategy.exit("Exit_SB", "Short_BAL", stop = close + stop_dist, limit = close - take_dist)
    trades_this_session += 1

if long_trend and can_trade and strategy.position_size == 0
    strategy.entry("Long_TRND", strategy.long, comment="Trend Long")
    strategy.exit("Exit_LT", "Long_TRND", stop = close - stop_dist, limit = close + take_dist)
    trades_this_session += 1

if short_trend and can_trade and strategy.position_size == 0
    strategy.entry("Short_TRND", strategy.short, comment="Trend Short")
    strategy.exit("Exit_ST", "Short_TRND", stop = close + stop_dist, limit = close - take_dist)
    trades_this_session += 1

// === ENHANCED VISUALS ===
// POC and Value Area
plot(poc_price, "POC", color=color.new(color.orange, 0), linewidth=3)
plot(val_price, "VAL", color=color.new(color.lime, 0), linewidth=2)
plot(vah_price, "VAH", color=color.new(color.red, 0), linewidth=2)

// Value Area fill
val_fill = plot(val_price, color=na)
vah_fill = plot(vah_price, color=na)
fill(val_fill, vah_fill, color=color.new(color.blue, 85), title="Value Area")

// Phase background
phase_color = balance_phase ? color.new(color.teal, 92) : 
              inefficiency_phase ? color.new(color.purple, 92) : na
bgcolor(phase_color, title="Market Phase")

// CVD momentum visualization
cvd_color = cvd_strong_bull ? color.new(color.lime, 70) : 
            cvd_strong_bear ? color.new(color.red, 70) : na
bgcolor(cvd_color, title="CVD Momentum")

// === PERFORMANCE DISPLAY ===
// Create performance table
var table perf_table = table.new(position.top_right, 2, 6, bgcolor=color.new(color.black, 80), border_width=1)

if barstate.islast
    table.cell(perf_table, 0, 0, "Metric", text_color=color.white, bgcolor=color.new(color.gray, 50))
    table.cell(perf_table, 1, 0, "Value", text_color=color.white, bgcolor=color.new(color.gray, 50))
    
    table.cell(perf_table, 0, 1, "Win Rate", text_color=color.white)
    table.cell(perf_table, 1, 1, str.tostring(win_rate * 100, "#.#") + "%", 
               text_color=win_rate > 0.6 ? color.lime : win_rate > 0.4 ? color.yellow : color.red)
    
    table.cell(perf_table, 0, 2, "Trades Today", text_color=color.white)
    table.cell(perf_table, 1, 2, str.tostring(trades_this_session), text_color=color.white)
    
    table.cell(perf_table, 0, 3, "Risk Mult", text_color=color.white)
    table.cell(perf_table, 1, 3, str.tostring(dynamic_risk_mult, "#.##"), text_color=color.cyan)
    
    table.cell(perf_table, 0, 4, "Take Mult", text_color=color.white)
    table.cell(perf_table, 1, 4, str.tostring(dynamic_take_mult, "#.##"), text_color=color.cyan)
    
    table.cell(perf_table, 0, 5, "Phase", text_color=color.white)
    phase_text = balance_phase ? "BALANCE" : inefficiency_phase ? "INEFFICIENCY" : "NEUTRAL"
    phase_color_text = balance_phase ? color.teal : inefficiency_phase ? color.purple : color.gray
    table.cell(perf_table, 1, 5, phase_text, text_color=phase_color_text)

// === ENHANCED ALERTS ===
// Balance phase alerts
alertcondition(long_balance, "AMT Balance Buy", "Balance Phase: Buy signal at {{close}} | POC: {{plot_0}} | VAL: {{plot_1}}")
alertcondition(short_balance, "AMT Balance Sell", "Balance Phase: Sell signal at {{close}} | POC: {{plot_0}} | VAH: {{plot_2}}")

// Trend phase alerts
alertcondition(long_trend, "AMT Trend Buy", "Inefficiency Phase: Buy signal at {{close}} | Above VAH with strong CVD")
alertcondition(short_trend, "AMT Trend Sell", "Inefficiency Phase: Sell signal at {{close}} | Below VAL with weak CVD")

// Performance alerts
alertcondition(win_rate > 0.75 and strategy.closedtrades > 5, "High Performance", "Win rate above 75%! Current: " + str.tostring(win_rate * 100, "#.#") + "%")
alertcondition(trades_this_session >= max_trades_per_session, "Max Trades Reached", "Maximum trades per session reached: " + str.tostring(max_trades_per_session))
